#Program sample
Begin Data Section
0 0       # program counter
1 0       # stack pointer
2 0  	  #Base register
3 0      #Limit register
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0     # memory indexes 0-20 are reserved.
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0      #  21 and 22 contains key and number N. 24 contains start index of the numbers to be searched
21 100     # N=100            number N is given at memory index=21  
22 435     # key=287         key is given at memory index=22
23 0      # save the first occurence of key here. For this data it should be 106. If key not found assign -1 here
24 60     #numbers to be searched starts at index 60
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0     # you may use locations 25 to 59 as registers
40 0
41 0
42 0
43 0
44 0
45 0
46 0
47 0
48 0
49 0
50 0
51 0
52 0
53 0
54 0
55 0
56 0
57 0
58 0
59 0
60 ^s^
61 ^e^
62 ^a^
63 ^r^
64 ^c^
65 ^h^
66 ^.^
67 ^t^
68 ^x^
69 ^t^
70 0
71 156
72 0
73 ^a^
74 ^d^
75 ^d^
76 ^N^
77 ^u^
78 ^m^
79 ^b^
80 ^e^
81 ^r^
82 ^s^
83 ^.^
84 ^t^
85 ^x^
86 ^t^
87 0
88 139
89 257
90 ^p^
91 ^r^
92 ^n^
93 ^B^
94 ^i^
95 ^g^
96 ^N^
97 ^u^
98 ^m^
99 ^b^
100 ^e^
101 ^r^
102 ^s^
103 ^.^
104 ^t^
105 ^x^
106 ^t^
107 0
108 62
109 297
110 143
111 70
112 206
113 187
114 94
115 163
116 118
117 223
118 63
119 153
120 130
121 999
End Data Section
Begin Instruction Section
0 SET 10 50 # i = 10
1 ADD 50 -1 # i = i – 1
2 CALL PRN 50  # Print i to the console
3 JIF 50 5  # Go to 6 if i <= 0
4 SET 2 0   # Go to 2 – remember address 0 is the program counter
5 CALL EXEC 90 # System call fork
6 CALL EXEC 73  # This line will print two numbers from each process
7 CALL EXEC 60 # load the program named PRG2 to the memory and run
8 HLT # note that PRG2 will run two times
End Instruction Section